// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatbot {
  id                String    @id @default(cuid())
  name              String
  description       String?
  website_url       String?
  business_type     String?
  primary_color     String    @default("#3B82F6")
  secondary_color   String    @default("#1E40AF")
  font_family       String    @default("Inter")
  welcome_message   String    @default("سلام! چطور می‌تونم کمکتون کنم؟")
  placeholder_text  String    @default("پیام خود را بنویسید...")
  position          String    @default("bottom-right")
  size              String    @default("medium")
  is_active         Boolean   @default(true)
  stats_multiplier  Int       @default(1)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  faqs              FAQ[]
  products          Product[]
  messages          Message[]
  tickets           Ticket[]
  admin_users       AdminUser[]

  @@map("chatbots")
}

model FAQ {
  id          String   @id @default(cuid())
  chatbot_id  String
  question    String
  answer      String
  category    String?
  is_active   Boolean  @default(true)
  order_index Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  chatbot     Chatbot  @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@map("faqs")
}

model Product {
  id          String   @id @default(cuid())
  chatbot_id  String
  name        String
  description String?
  price       Decimal?
  image_url   String?
  category    String?
  is_active   Boolean  @default(true)
  order_index Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  chatbot     Chatbot  @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@map("products")
}

model Message {
  id          String   @id @default(cuid())
  chatbot_id  String
  user_id     String?
  content     String
  is_user     Boolean
  session_id  String?
  created_at  DateTime @default(now())

  // Relations
  chatbot     Chatbot  @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

model User {
  id         String   @id @default(cuid())
  phone      String?  @unique
  email      String?  @unique
  name       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  tickets    Ticket[]

  @@map("users")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Ticket {
  id          String       @id @default(cuid())
  chatbot_id  String
  user_id     String?
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    String       @default("medium")
  image_url   String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // Relations
  chatbot     Chatbot       @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [user_id], references: [id])
  responses   TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id         String   @id @default(cuid())
  ticket_id  String
  content    String
  is_admin   Boolean  @default(false)
  created_at DateTime @default(now())

  // Relations
  ticket     Ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model AdminUser {
  id          String   @id @default(cuid())
  chatbot_id  String
  username    String
  password    String
  role        String   @default("admin")
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  chatbot     Chatbot  @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@unique([chatbot_id, username])
  @@map("admin_users")
}
