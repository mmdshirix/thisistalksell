generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatbot {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  statsMultiplier    Float    @default(1.0)
  widgetPosition     String   @default("bottom-right")
  widgetIcon         String?
  chatHeader         String   @default("AI Chatbot")
  chatWelcomeMessage String   @default("Hello! How can I help you today?")
  primaryColor       String   @default("#6366F1")
  secondaryColor     String   @default("#F3F4F6")
  backgroundColor    String   @default("#FFFFFF")
  textColor          String   @default("#1F2937")
  fontFamily         String   @default("sans-serif")
  borderRadius       String   @default("0.75rem")
  faqs               FAQ[]
  products           Product[]
  adminUsers         AdminUser[]
  tickets            Ticket[]
}

model FAQ {
  id          Int      @id @default(autoincrement())
  chatbotId   Int
  question    String
  answer      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  suggestedProductId Int?
  suggestedProduct Product? @relation(fields: [suggestedProductId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  chatbotId   Int
  name        String
  description String?
  price       Float?
  imageUrl    String?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  faqs        FAQ[]
}

model AdminUser {
  id          Int      @id @default(autoincrement())
  chatbotId   Int
  username    String   @unique
  password    String
  role        String   @default("admin")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Ticket {
  id          Int      @id @default(autoincrement())
  chatbotId   Int
  userId      String
  userPhone   String?
  issue       String
  status      String   @default("open")
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  responses   TicketResponse[]
}

model TicketResponse {
  id          Int      @id @default(autoincrement())
  ticketId    Int
  adminUserId Int
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id])
}
