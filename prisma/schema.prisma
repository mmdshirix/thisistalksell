generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chatbots {
  id                Int       @id @default(autoincrement())
  name              String
  welcome_message   String?
  navigation_message String?
  primary_color     String?
  text_color        String?
  background_color  String?
  chat_icon         String?
  position          String?
  store_url         String?
  ai_url            String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  stats_multiplier  Float     @default(1.0)
  faqs              faqs[]
  products          products[]
  tickets           tickets[]
  admin_users       admin_users_on_chatbots[]
}

model faqs {
  id         Int      @id @default(autoincrement())
  chatbot_id Int
  question   String
  answer     String
  emoji      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  chatbot    chatbots @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)
}

model products {
  id          Int      @id @default(autoincrement())
  chatbot_id  Int
  name        String
  description String?
  price       Float?
  image_url   String?
  product_url String?
  button_text String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  chatbot     chatbots @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)
}

model tickets {
  id          Int      @id @default(autoincrement())
  chatbot_id  Int
  user_phone  String
  issue       String
  status      String   @default("open")
  image_url   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  chatbot     chatbots @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)
  responses   ticket_responses[]
}

model ticket_responses {
  id         Int      @id @default(autoincrement())
  ticket_id  Int
  admin_id   Int
  response   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  ticket     tickets  @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  admin_user admin_users @relation(fields: [admin_id], references: [id], onDelete: Cascade)
}

model admin_users {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  chatbots   admin_users_on_chatbots[]
  responses  ticket_responses[]
}

model admin_users_on_chatbots {
  admin_user_id Int
  chatbot_id    Int
  assigned_at   DateTime @default(now())
  admin_user    admin_users @relation(fields: [admin_user_id], references: [id], onDelete: Cascade)
  chatbot       chatbots    @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@id([admin_user_id, chatbot_id])
}
