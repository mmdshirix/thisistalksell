generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatbot {
  id                      String   @id @default(cuid())
  name                    String
  description             String?
  model                   String   @default("gpt-4o")
  temperature             Float    @default(0.7)
  max_tokens              Int      @default(500)
  top_p                   Float    @default(1.0)
  frequency_penalty       Float    @default(0.0)
  presence_penalty        Float    @default(0.0)
  show_product_suggestions Boolean @default(false)
  show_faq_suggestions    Boolean @default(false)
  show_quick_options      Boolean @default(false)
  show_ticket_form        Boolean @default(false)
  stats_multiplier        Int      @default(1)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  // Relations
  messages          Message[]
  faqs              FAQ[]
  suggested_products SuggestedProduct[]
  quick_options     QuickOption[]
  admin_users       AdminUser[]
  tickets           Ticket[]

  @@map("chatbots")
}

model Message {
  id           String   @id @default(cuid())
  chatbot_id   String
  user_message String
  bot_response String
  created_at   DateTime @default(now())

  // Relations
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@index([chatbot_id])
  @@index([created_at])
  @@map("messages")
}

model FAQ {
  id          String @id @default(cuid())
  chatbot_id  String
  question    String
  answer      String
  position    Int    @default(0)

  // Relations
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@index([chatbot_id])
  @@map("faqs")
}

model SuggestedProduct {
  id          String @id @default(cuid())
  chatbot_id  String
  name        String
  description String
  position    Int    @default(0)

  // Relations
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@index([chatbot_id])
  @@map("suggested_products")
}

model QuickOption {
  id         String @id @default(cuid())
  chatbot_id String
  text       String
  position   Int    @default(0)

  // Relations
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@index([chatbot_id])
  @@map("quick_options")
}

model AdminUser {
  id            String   @id @default(cuid())
  chatbot_id    String
  username      String
  password_hash String
  role          String   @default("admin")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  chatbot Chatbot @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)

  @@unique([chatbot_id, username])
  @@index([chatbot_id])
  @@map("admin_users")
}

model Ticket {
  id          String   @id @default(cuid())
  chatbot_id  String
  name        String
  phone       String
  message     String
  image_url   String?
  status      String   @default("open")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  chatbot   Chatbot          @relation(fields: [chatbot_id], references: [id], onDelete: Cascade)
  responses TicketResponse[]

  @@index([chatbot_id])
  @@index([status])
  @@index([created_at])
  @@map("tickets")
}

model TicketResponse {
  id         String   @id @default(cuid())
  ticket_id  String
  message    String
  is_admin   Boolean  @default(false)
  created_at DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)

  @@index([ticket_id])
  @@index([created_at])
  @@map("ticket_responses")
}
