generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chatbots Chatbot[]
  messages Message[]
  tickets  Ticket[]

  @@map("users")
}

model Chatbot {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Settings
  primaryColor   String @default("#3B82F6")
  secondaryColor String @default("#EFF6FF")
  welcomeMessage String @default("سلام! چطور می‌تونم کمکتون کنم؟")
  placeholder    String @default("پیام خود را بنویسید...")

  // Stats
  totalMessages Int @default(0)
  totalUsers    Int @default(0)
  statsMultiplier Float @default(1.0)

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  faqs     FAQ[]
  products Product[]
  tickets  Ticket[]
  adminUsers AdminUser[]

  @@map("chatbots")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())

  // Relations
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model FAQ {
  id       String @id @default(cuid())
  question String
  answer   String
  isActive Boolean @default(true)
  position Int     @default(0)

  // Relations
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("faqs")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float?
  imageUrl    String?
  url         String?
  isActive    Boolean @default(true)
  position    Int     @default(0)

  // Relations
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Ticket {
  id          String        @id @default(cuid())
  title       String
  description String
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  responses TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id        String   @id @default(cuid())
  content   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model AdminUser {
  id       String @id @default(cuid())
  username String @unique
  password String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("admin_users")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
