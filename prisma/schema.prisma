generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages Message[]
  tickets  Ticket[]

  @@map("users")
}

model Chatbot {
  id                        Int      @id @default(autoincrement())
  name                      String   @db.VarChar(255)
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")
  primaryColor              String   @default("#14b8a6") @map("primary_color") @db.VarChar(50)
  textColor                 String   @default("#ffffff") @map("text_color") @db.VarChar(50)
  backgroundColor           String   @default("#f3f4f6") @map("background_color") @db.VarChar(50)
  chatIcon                  String   @default("üí¨") @map("chat_icon")
  position                  String   @default("bottom-right") @db.VarChar(50)
  marginX                   Int      @default(20) @map("margin_x")
  marginY                   Int      @default(20) @map("margin_y")
  deepseekApiKey            String?  @map("deepseek_api_key")
  welcomeMessage            String   @default("ÿ≥ŸÑÿßŸÖ! ⁄Üÿ∑Ÿàÿ± ŸÖ€å‚Äåÿ™ŸàÿßŸÜŸÖ ÿ®Ÿá ÿ¥ŸÖÿß ⁄©ŸÖ⁄© ⁄©ŸÜŸÖÿü") @map("welcome_message")
  navigationMessage         String   @default("⁄ÜŸá ⁄Ü€åÿ≤€å ÿ¥ŸÖÿß ÿ±ÿß ÿ®Ÿá ÿß€åŸÜÿ¨ÿß ÿ¢Ÿàÿ±ÿØŸá ÿßÿ≥ÿ™ÿü") @map("navigation_message")
  knowledgeBaseText         String?  @map("knowledge_base_text")
  knowledgeBaseUrl          String?  @map("knowledge_base_url")
  storeUrl                  String?  @map("store_url")
  aiUrl                     String?  @map("ai_url")
  statsMultiplier           Decimal  @default(1.0) @map("stats_multiplier") @db.Decimal(5, 2)
  enableProductSuggestions  Boolean  @default(true) @map("enable_product_suggestions")
  enableNextSuggestions     Boolean  @default(true) @map("enable_next_suggestions")
  promptTemplate            String?  @map("prompt_template")

  // Relations
  messages    Message[]
  faqs        ChatbotFAQ[]
  products    ChatbotProduct[]
  options     ChatbotOption[]
  tickets     Ticket[]
  adminUsers  ChatbotAdminUser[]

  @@map("chatbots")
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  role        String   // user, assistant, system
  userMessage String?  @map("user_message")
  botResponse String?  @map("bot_response")
  timestamp   DateTime @default(now())
  userIp      String?  @map("user_ip") @db.VarChar(50)
  userAgent   String?  @map("user_agent")

  // Relations
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @map("user_id")
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId Int      @map("chatbot_id")

  @@map("messages")
}

model ChatbotFAQ {
  id        Int     @id @default(autoincrement())
  chatbotId Int     @map("chatbot_id")
  question  String
  answer    String?
  emoji     String? @default("‚ùì") @db.VarChar(10)
  position  Int     @default(0)

  // Relations
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("chatbot_faqs")
}

model ChatbotProduct {
  id            Int      @id @default(autoincrement())
  chatbotId     Int      @map("chatbot_id")
  name          String   @db.VarChar(255)
  description   String?
  imageUrl      String?  @map("image_url")
  price         Decimal? @db.Decimal(10, 2)
  position      Int      @default(0)
  buttonText    String   @default("ÿÆÿ±€åÿØ") @map("button_text") @db.VarChar(100)
  secondaryText String   @default("ÿ¨ÿ≤ÿ¶€åÿßÿ™") @map("secondary_text") @db.VarChar(100)
  productUrl    String?  @map("product_url")

  // Relations
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("chatbot_products")
}

model ChatbotOption {
  id        Int     @id @default(autoincrement())
  chatbotId Int     @map("chatbot_id")
  label     String  @db.VarChar(255)
  emoji     String?
  position  Int     @default(0)

  // Relations
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("chatbot_options")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?  @map("image_url")
  category    String?
  inStock     Boolean  @default(true) @map("in_stock")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model Ticket {
  id        Int           @id @default(autoincrement())
  chatbotId Int           @map("chatbot_id")
  userId    Int?          @map("user_id")
  name      String        @db.VarChar(255)
  email     String        @db.VarChar(255)
  phone     String?       @db.VarChar(50)
  userIp    String?       @map("user_ip") @db.VarChar(50)
  userAgent String?       @map("user_agent")
  subject   String        @db.VarChar(500)
  message   String
  imageUrl  String?       @map("image_url")
  status    TicketStatus  @default(OPEN)
  priority  TicketPriority @default(NORMAL)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Relations
  user      User?            @relation(fields: [userId], references: [id])
  chatbot   Chatbot          @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  responses TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id        Int      @id @default(autoincrement())
  ticketId  Int      @map("ticket_id")
  message   String
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model ChatbotAdminUser {
  id           Int       @id @default(autoincrement())
  chatbotId    Int       @map("chatbot_id")
  username     String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  fullName     String?   @map("full_name") @db.VarChar(255)
  email        String?   @db.VarChar(255)
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  chatbot  Chatbot               @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  sessions ChatbotAdminSession[]

  @@map("chatbot_admin_users")
}

model ChatbotAdminSession {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user ChatbotAdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chatbot_admin_sessions")
}

enum TicketStatus {
  OPEN
  CLOSED
  PENDING
  IN_PROGRESS
  RESOLVED

  @@map("ticket_status")
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH

  @@map("ticket_priority")
}
