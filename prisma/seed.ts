import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

async function main() {
  console.log("üå± Starting database seeding...")

  // Create sample users
  const user1 = await prisma.user.upsert({
    where: { email: "user1@example.com" },
    update: {},
    create: {
      email: "user1@example.com",
      name: "⁄©ÿßÿ±ÿ®ÿ± ŸÜŸÖŸàŸÜŸá €±",
      phone: "09123456789",
    },
  })

  const user2 = await prisma.user.upsert({
    where: { email: "user2@example.com" },
    update: {},
    create: {
      email: "user2@example.com",
      name: "⁄©ÿßÿ±ÿ®ÿ± ŸÜŸÖŸàŸÜŸá €≤",
      phone: "09987654321",
    },
  })

  // Create sample chatbot
  const chatbot = await prisma.chatbot.upsert({
    where: { id: 1 },
    update: {},
    create: {
      name: "⁄Üÿ™‚Äåÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá€å",
      primaryColor: "#2563EB",
      textColor: "#FFFFFF",
      backgroundColor: "#F3F4F6",
      chatIcon: "ü§ñ",
      position: "bottom-right",
      marginX: 20,
      marginY: 20,
      welcomeMessage: "ÿ≥ŸÑÿßŸÖ! ÿ®Ÿá ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ŸÖÿß ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ. ⁄Üÿ∑Ÿàÿ± ŸÖ€å‚Äåÿ™ŸàÿßŸÜŸÖ ⁄©ŸÖ⁄©ÿ™ÿßŸÜ ⁄©ŸÜŸÖÿü",
      navigationMessage: "ŸÑÿ∑ŸÅÿßŸã €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
      knowledgeBaseText: "ÿß€åŸÜ €å⁄© ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ¢ŸÜŸÑÿß€åŸÜ ÿßÿ≥ÿ™ ⁄©Ÿá ÿßŸÜŸàÿßÿπ ŸÖÿ≠ÿµŸàŸÑÿßÿ™ ÿ±ÿß ÿßÿ±ÿßÿ¶Ÿá ŸÖ€å‚ÄåÿØŸáÿØ.",
      statsMultiplier: 1.0,
      enableProductSuggestions: true,
      enableNextSuggestions: true,
    },
  })

  // Create sample FAQs
  const faqs = [
    {
      chatbotId: chatbot.id,
      question: "ÿ≥ÿßÿπÿßÿ™ ⁄©ÿßÿ±€å ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ⁄Ü€åÿ≥ÿ™ÿü",
      answer: "ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ŸÖÿß €≤€¥ ÿ≥ÿßÿπÿ™Ÿá ŸÅÿπÿßŸÑ ÿßÿ≥ÿ™ Ÿà ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ Ÿáÿ± ÿ≤ŸÖÿßŸÜ ÿÆÿ±€åÿØ ⁄©ŸÜ€åÿØ.",
      emoji: "üïê",
      position: 0,
    },
    {
      chatbotId: chatbot.id,
      question: "⁄Ü⁄ØŸàŸÜŸá ÿ≥ŸÅÿßÿ±ÿ¥ ÿØŸáŸÖÿü",
      answer: "ÿ®ÿ±ÿß€å ÿ≥ŸÅÿßÿ±ÿ¥ÿå ŸÖÿ≠ÿµŸàŸÑ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ÿ±ÿØŸá Ÿà ÿ®Ÿá ÿ≥ÿ®ÿØ ÿÆÿ±€åÿØ ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ.",
      emoji: "üõí",
      position: 1,
    },
    {
      chatbotId: chatbot.id,
      question: "Ÿáÿ≤€åŸÜŸá ÿßÿ±ÿ≥ÿßŸÑ ⁄ÜŸÇÿØÿ± ÿßÿ≥ÿ™ÿü",
      answer: "ÿßÿ±ÿ≥ÿßŸÑ ÿ®ÿ±ÿß€å ÿ≥ŸÅÿßÿ±ÿ¥‚ÄåŸáÿß€å ÿ®ÿßŸÑÿß€å €µ€∞€∞ Ÿáÿ≤ÿßÿ± ÿ™ŸàŸÖÿßŸÜ ÿ±ÿß€å⁄ØÿßŸÜ ÿßÿ≥ÿ™.",
      emoji: "üöö",
      position: 2,
    },
  ]

  for (const faq of faqs) {
    await prisma.chatbotFAQ.upsert({
      where: { id: faq.position + 1 },
      update: {},
      create: faq,
    })
  }

  // Create sample products
  const products = [
    {
      chatbotId: chatbot.id,
      name: "⁄ØŸàÿ¥€å ŸáŸàÿ¥ŸÖŸÜÿØ",
      description: "⁄ØŸàÿ¥€å ŸáŸàÿ¥ŸÖŸÜÿØ ÿ®ÿß ⁄©€åŸÅ€åÿ™ ÿ®ÿßŸÑÿß Ÿà ŸÇ€åŸÖÿ™ ŸÖŸÜÿßÿ≥ÿ®",
      price: 15000000,
      imageUrl: "/placeholder.svg?height=200&width=200",
      buttonText: "ÿÆÿ±€åÿØ",
      secondaryText: "ŸÖÿ¥ÿßŸáÿØŸá ÿ¨ÿ≤ÿ¶€åÿßÿ™",
      productUrl: "/products/smartphone",
      position: 0,
    },
    {
      chatbotId: chatbot.id,
      name: "ŸÑŸæ‚Äåÿ™ÿßŸæ",
      description: "ŸÑŸæ‚Äåÿ™ÿßŸæ ŸÇÿØÿ±ÿ™ŸÖŸÜÿØ ÿ®ÿ±ÿß€å ⁄©ÿßÿ± Ÿà ÿ®ÿßÿ≤€å",
      price: 25000000,
      imageUrl: "/placeholder.svg?height=200&width=200",
      buttonText: "ÿÆÿ±€åÿØ",
      secondaryText: "ŸÖÿ¥ÿßŸáÿØŸá ÿ¨ÿ≤ÿ¶€åÿßÿ™",
      productUrl: "/products/laptop",
      position: 1,
    },
    {
      chatbotId: chatbot.id,
      name: "ŸáÿØŸÅŸàŸÜ",
      description: "ŸáÿØŸÅŸàŸÜ ÿ®€å‚Äåÿ≥€åŸÖ ÿ®ÿß ⁄©€åŸÅ€åÿ™ ÿµÿØÿß€å ÿπÿßŸÑ€å",
      price: 2000000,
      imageUrl: "/placeholder.svg?height=200&width=200",
      buttonText: "ÿÆÿ±€åÿØ",
      secondaryText: "ŸÖÿ¥ÿßŸáÿØŸá ÿ¨ÿ≤ÿ¶€åÿßÿ™",
      productUrl: "/products/headphones",
      position: 2,
    },
  ]

  for (const product of products) {
    await prisma.chatbotProduct.upsert({
      where: { id: product.position + 1 },
      update: {},
      create: product,
    })
  }

  // Create sample options
  const options = [
    {
      chatbotId: chatbot.id,
      label: "ŸÖÿ¥ÿßŸáÿØŸá ŸÖÿ≠ÿµŸàŸÑÿßÿ™",
      emoji: "üì±",
      position: 0,
    },
    {
      chatbotId: chatbot.id,
      label: "Ÿæ€å⁄Ø€åÿ±€å ÿ≥ŸÅÿßÿ±ÿ¥",
      emoji: "üì¶",
      position: 1,
    },
    {
      chatbotId: chatbot.id,
      label: "Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å",
      emoji: "üí¨",
      position: 2,
    },
  ]

  for (const option of options) {
    await prisma.chatbotOption.upsert({
      where: { id: option.position + 1 },
      update: {},
      create: option,
    })
  }

  // Create sample messages
  const messages = [
    {
      chatbotId: chatbot.id,
      userId: user1.id,
      content: "ÿ≥ŸÑÿßŸÖÿå ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÖ €å⁄© ⁄ØŸàÿ¥€å ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜŸÖ",
      role: "user",
      userMessage: "ÿ≥ŸÑÿßŸÖÿå ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÖ €å⁄© ⁄ØŸàÿ¥€å ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜŸÖ",
      botResponse: "ÿ≥ŸÑÿßŸÖ! ÿÆŸàÿ¥ÿ≠ÿßŸÑŸÖ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿßÿ≤ ŸÖÿß ÿÆÿ±€åÿØ ⁄©ŸÜ€åÿØ. ⁄ÜŸá ŸÜŸàÿπ ⁄ØŸàÿ¥€å‚Äåÿß€å ÿØŸÜÿ®ÿßŸÑ Ÿáÿ≥ÿ™€åÿØÿü",
      userIp: "192.168.1.1",
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
    },
    {
      chatbotId: chatbot.id,
      userId: user2.id,
      content: "ÿ¢€åÿß ÿßÿ±ÿ≥ÿßŸÑ ÿ±ÿß€å⁄ØÿßŸÜ ÿØÿßÿ±€åÿØÿü",
      role: "user",
      userMessage: "ÿ¢€åÿß ÿßÿ±ÿ≥ÿßŸÑ ÿ±ÿß€å⁄ØÿßŸÜ ÿØÿßÿ±€åÿØÿü",
      botResponse: "ÿ®ŸÑŸáÿå ÿ®ÿ±ÿß€å ÿ≥ŸÅÿßÿ±ÿ¥‚ÄåŸáÿß€å ÿ®ÿßŸÑÿß€å €µ€∞€∞ Ÿáÿ≤ÿßÿ± ÿ™ŸàŸÖÿßŸÜ ÿßÿ±ÿ≥ÿßŸÑ ÿ±ÿß€å⁄ØÿßŸÜ ÿßÿ≥ÿ™.",
      userIp: "192.168.1.2",
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
    },
  ]

  for (const message of messages) {
    await prisma.message.create({
      data: message,
    })
  }

  // Create sample products in general products table
  const generalProducts = [
    {
      name: "⁄ØŸàÿ¥€å Samsung Galaxy S23",
      description: "⁄ØŸàÿ¥€å ŸáŸàÿ¥ŸÖŸÜÿØ Ÿæÿ±⁄ÜŸÖÿØÿßÿ± ÿ≥ÿßŸÖÿ≥ŸàŸÜ⁄Ø ÿ®ÿß ÿØŸàÿ±ÿ®€åŸÜ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá",
      price: 18000000,
      imageUrl: "/placeholder.svg?height=300&width=300",
      category: "ŸÖŸàÿ®ÿß€åŸÑ",
      inStock: true,
    },
    {
      name: "ŸÑŸæ‚Äåÿ™ÿßŸæ MacBook Pro",
      description: "ŸÑŸæ‚Äåÿ™ÿßŸæ ÿ≠ÿ±ŸÅŸá‚Äåÿß€å ÿßŸæŸÑ ÿ®ÿ±ÿß€å ⁄©ÿßÿ±Ÿáÿß€å ÿ≥ŸÜ⁄Ø€åŸÜ",
      price: 45000000,
      imageUrl: "/placeholder.svg?height=300&width=300",
      category: "ŸÑŸæ‚Äåÿ™ÿßŸæ",
      inStock: true,
    },
    {
      name: "ŸáÿØŸÅŸàŸÜ Sony WH-1000XM4",
      description: "ŸáÿØŸÅŸàŸÜ ÿ®€å‚Äåÿ≥€åŸÖ ÿ®ÿß ÿ≠ÿ∞ŸÅ ŸÜŸà€åÿ≤ ŸÅÿπÿßŸÑ",
      price: 8000000,
      imageUrl: "/placeholder.svg?height=300&width=300",
      category: "ÿµŸàÿ™€å",
      inStock: false,
    },
  ]

  for (const product of generalProducts) {
    await prisma.product.create({
      data: product,
    })
  }

  // Create sample ticket
  const ticket = await prisma.ticket.create({
    data: {
      chatbotId: chatbot.id,
      userId: user1.id,
      name: "ÿπŸÑ€å ÿßÿ≠ŸÖÿØ€å",
      email: "ali@example.com",
      phone: "09123456789",
      subject: "ŸÖÿ¥⁄©ŸÑ ÿØÿ± Ÿæÿ±ÿØÿßÿÆÿ™",
      message: "ÿ≥ŸÑÿßŸÖÿå ŸáŸÜ⁄ØÿßŸÖ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ®ÿß ÿÆÿ∑ÿß ŸÖŸàÿßÿ¨Ÿá ÿ¥ÿØŸÖ. ŸÑÿ∑ŸÅÿßŸã ⁄©ŸÖ⁄© ⁄©ŸÜ€åÿØ.",
      status: "OPEN",
      priority: "NORMAL",
      userIp: "192.168.1.1",
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
    },
  })

  // Create sample ticket response
  await prisma.ticketResponse.create({
    data: {
      ticketId: ticket.id,
      message: "ÿ≥ŸÑÿßŸÖ ÿ¢ŸÇÿß€å ÿßÿ≠ŸÖÿØ€åÿå ÿ™€åŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿ¥⁄©ŸÑ ÿ¥ŸÖÿß ÿßÿ≥ÿ™.",
      isAdmin: true,
    },
  })

  // Create sample admin user
  await prisma.chatbotAdminUser.create({
    data: {
      chatbotId: chatbot.id,
      username: "admin",
      passwordHash: "$2b$10$example.hash.here", // In real app, use proper bcrypt hash
      fullName: "ŸÖÿØ€åÿ± ÿ≥€åÿ≥ÿ™ŸÖ",
      email: "admin@example.com",
      isActive: true,
    },
  })

  console.log("‚úÖ Database seeding completed successfully!")
  console.log(`Created:
  - ${faqs.length} FAQs
  - ${products.length} chatbot products
  - ${options.length} chatbot options
  - ${messages.length} messages
  - ${generalProducts.length} general products
  - 1 ticket with 1 response
  - 1 admin user
  - 2 users`)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error("‚ùå Error during seeding:", e)
    await prisma.$disconnect()
    process.exit(1)
  })
