// Enhanced product matching system with stricter criteria and faster processing
interface Product {
  id: number
  name: string
  description: string
  price: number
  image_url: string
  button_text: string
  product_url: string
}

interface MatchResult {
  product: Product
  score: number
  matchType: string
}

// Persian text normalization - optimized for speed
function normalizeText(text: string): string {
  return text
    .toLowerCase()
    .replace(/[€∞-€π]/g, (d) => String.fromCharCode(d.charCodeAt(0) - "€∞".charCodeAt(0) + "0".charCodeAt(0)))
    .replace(/Ÿä/g, "€å")
    .replace(/ŸÉ/g, "⁄©")
    .replace(/[^\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF\u200C\u200D\s\w]/g, " ")
    .replace(/\s+/g, " ")
    .trim()
}

// Extract keywords - faster implementation
function extractKeywords(text: string): string[] {
  const normalized = normalizeText(text)
  const words = normalized.split(/\s+/).filter((word) => word.length > 2)

  // Optimized stop words list
  const stopWords = new Set([
    "ÿ®ÿ±ÿß€å",
    "ÿßÿ≥ÿ™",
    "ÿß€åŸÜ",
    "ÿ¢ŸÜ",
    "⁄©Ÿá",
    "ÿ±ÿß",
    "ÿ®Ÿá",
    "ÿßÿ≤",
    "ÿØÿ±",
    "ÿ®ÿß",
    "ÿ™ÿß",
    "€åÿß",
    "Ÿà",
    "ŸáŸÖ",
    "ŸÜ€åÿ≤",
    "⁄ÜŸá",
    "⁄©€å",
    "⁄Ü€å",
    "⁄©ÿ¨ÿß",
    "⁄Üÿ±ÿß",
    "⁄Ü⁄ØŸàŸÜŸá",
    "⁄©ÿØÿßŸÖ",
    "Ÿáÿ±",
    "ŸáŸÖŸá",
    "ÿ®ÿπÿ∂€å",
    "ÿÆ€åŸÑ€å",
    "ÿ≤€åÿßÿØ",
    "⁄©ŸÖ",
    "ÿßŸÜÿØ⁄©€å",
    "ÿ≥ŸÑÿßŸÖ",
    "ÿØÿ±ŸàÿØ",
    "ŸÖŸÖŸÜŸàŸÜ",
    "ŸÖÿ™ÿ¥⁄©ÿ±ŸÖ",
    "ÿÆÿØÿßÿ≠ÿßŸÅÿ∏",
  ])

  return words.filter((word) => !stopWords.has(word))
}

// Stricter purchase intent detection
function detectStrictPurchaseIntent(userMessage: string): boolean {
  const normalized = normalizeText(userMessage)

  // High-confidence purchase keywords
  const strongPurchaseKeywords = [
    "ÿÆÿ±€åÿØ",
    "ÿ®ÿÆÿ±ŸÖ",
    "ŸÖ€åÿÆŸàÿßŸÖ",
    "ŸÖ€å‚ÄåÿÆŸàÿßŸÖ",
    "ŸÖ€åÿÆŸàÿßŸáŸÖ",
    "ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÖ",
    "ÿ≥ŸÅÿßÿ±ÿ¥",
    "ÿ™Ÿá€åŸá",
    "Ÿæ€åÿ¥ŸÜŸáÿßÿØ",
    "ÿ™Ÿàÿµ€åŸá",
    "ÿ®Ÿáÿ™ÿ±€åŸÜ",
    "ŸÖŸÜÿßÿ≥ÿ®",
    "ŸÇ€åŸÖÿ™",
    "Ÿáÿ≤€åŸÜŸá",
    "ÿ™ŸàŸÖÿßŸÜ",
    "ÿ±€åÿßŸÑ",
    "ŸæŸàŸÑ",
    "ŸÅÿ±Ÿàÿ¥",
  ]

  // Specific product categories
  const productCategories = [
    "ŸÖŸàÿ®ÿß€åŸÑ",
    "⁄ØŸàÿ¥€å",
    "ÿ™ÿ®ŸÑÿ™",
    "ŸÑŸæ‚Äåÿ™ÿßŸæ",
    "ŸÑŸæÿ™ÿßŸæ",
    "⁄©ÿßŸÖŸæ€åŸàÿ™ÿ±",
    "ŸáÿØŸÅŸàŸÜ",
    "⁄©€åÿ®Ÿàÿ±ÿØ",
    "ŸÖÿßŸàÿ≥",
    "ŸÖÿßŸÜ€åÿ™Ÿàÿ±",
    "ÿ™ŸÑŸà€åÿ≤€åŸàŸÜ",
    "ÿ≥ÿßÿπÿ™",
  ]

  // Brand names
  const brands = ["ÿ≥ÿßŸÖÿ≥ŸàŸÜ⁄Ø", "ÿßŸæŸÑ", "ÿ¥€åÿßÿ¶ŸàŸÖ€å", "ŸáŸàÿßŸà€å", "ÿßŸÑ‚Äåÿ¨€å", "ÿ≥ŸàŸÜ€å", "ÿß€åÿ≥Ÿàÿ≥", "ÿß⁄Ü‚ÄåŸæ€å", "ÿØŸÑ", "ÿß€åÿ≥ÿ±", "ŸÑŸÜŸàŸà"]

  // Direct product mention
  const hasProductMention = normalized.includes("ŸÖÿ≠ÿµŸàŸÑ") || normalized.includes("⁄©ÿßŸÑÿß")

  // Strong purchase intent
  const hasStrongIntent = strongPurchaseKeywords.some((keyword) => normalized.includes(keyword))

  // Category or brand mention
  const hasCategoryOrBrand = [...productCategories, ...brands].some((item) => normalized.includes(item))

  // Question patterns indicating shopping intent
  const shoppingPatterns = [
    /⁄ÜŸá.*ÿ®ÿÆÿ±ŸÖ/,
    /⁄©ÿØÿßŸÖ.*ÿ®Ÿáÿ™ÿ±/,
    /ÿ®Ÿáÿ™ÿ±€åŸÜ.*⁄Ü€åŸá/,
    /Ÿæ€åÿ¥ŸÜŸáÿßÿØ.*ŸÖ€å.*ÿØ€å/,
    /ÿ™Ÿàÿµ€åŸá.*ŸÖ€å.*⁄©ŸÜ€å/,
    /ŸÇ€åŸÖÿ™.*⁄ÜŸÇÿØÿ±/,
    /⁄ÜŸÜÿØ.*ÿ™ŸàŸÖÿßŸÜ/,
    /⁄©ÿ¨ÿß.*ÿ®ÿÆÿ±ŸÖ/,
  ]

  const hasShoppingPattern = shoppingPatterns.some((pattern) => pattern.test(normalized))

  // Stricter criteria: need at least 2 indicators
  const indicators = [hasProductMention, hasStrongIntent, hasCategoryOrBrand, hasShoppingPattern].filter(Boolean).length

  return indicators >= 2
}

// Ultra-fast matching algorithm with higher thresholds
export function findMatchingProducts(userMessage: string, products: Product[]): Product[] {
  if (!products || products.length === 0) return []

  // First check: strict purchase intent
  if (!detectStrictPurchaseIntent(userMessage)) {
    console.log("‚ùå No strong purchase intent detected")
    return []
  }

  console.log("‚úÖ Strong purchase intent detected, proceeding with matching...")

  const userKeywords = extractKeywords(userMessage)
  if (userKeywords.length === 0) {
    console.log("‚ùå No meaningful keywords found")
    return []
  }

  const matches: MatchResult[] = []

  for (const product of products) {
    let score = 0
    let matchType = "none"

    const productName = normalizeText(product.name)
    const productDesc = normalizeText(product.description || "")

    // Stage 1: Exact brand/product name match (highest priority)
    const exactMatch = userKeywords.some(
      (keyword) => keyword.length > 3 && (productName.includes(keyword) || keyword.includes(productName.split(" ")[0])),
    )
    if (exactMatch) {
      score += 3000
      matchType = "exact_match"
    }

    // Stage 2: Brand exact match
    const brands = ["ÿ≥ÿßŸÖÿ≥ŸàŸÜ⁄Ø", "ÿßŸæŸÑ", "ÿ¥€åÿßÿ¶ŸàŸÖ€å", "ŸáŸàÿßŸà€å", "ÿßŸÑ‚Äåÿ¨€å", "ÿ≥ŸàŸÜ€å", "ÿß€åÿ≥Ÿàÿ≥"]
    const brandMatch = brands.find((brand) => userMessage.includes(brand) && productName.includes(brand))
    if (brandMatch) {
      score += 2500
      matchType = "brand_exact"
    }

    // Stage 3: Category exact match
    const categories = ["ŸÖŸàÿ®ÿß€åŸÑ", "⁄ØŸàÿ¥€å", "ÿ™ÿ®ŸÑÿ™", "ŸÑŸæ‚Äåÿ™ÿßŸæ", "⁄©ÿßŸÖŸæ€åŸàÿ™ÿ±", "ŸáÿØŸÅŸàŸÜ"]
    const categoryMatch = categories.find(
      (category) => userMessage.includes(category) && productName.includes(category),
    )
    if (categoryMatch) {
      score += 2000
      matchType = "category_exact"
    }

    // Stage 4: Multiple keyword match
    const nameWords = productName.split(/\s+/)
    const keywordMatches = userKeywords.filter((keyword) =>
      nameWords.some((word) => word.includes(keyword) && keyword.length > 3),
    ).length

    if (keywordMatches >= 2) {
      score += keywordMatches * 1000
      matchType = "multi_keyword"
    }

    // Stage 5: Price range matching (if mentioned)
    const priceRegex = /(\d+)\s*(?:ÿ™ŸàŸÖÿßŸÜ|ÿ±€åÿßŸÑ|Ÿáÿ≤ÿßÿ±|ŸÖ€åŸÑ€åŸàŸÜ)/g
    const userPrices = [...userMessage.matchAll(priceRegex)].map((match) => {
      let price = Number.parseInt(match[1])
      if (match[0].includes("Ÿáÿ≤ÿßÿ±")) price *= 1000
      if (match[0].includes("ŸÖ€åŸÑ€åŸàŸÜ")) price *= 1000000
      return price
    })

    if (userPrices.length > 0 && product.price) {
      const avgUserPrice = userPrices.reduce((a, b) => a + b, 0) / userPrices.length
      const priceDiff = Math.abs(product.price - avgUserPrice) / Math.max(avgUserPrice, product.price)
      if (priceDiff < 0.15)
        score += 1500 // Very close price match
      else if (priceDiff < 0.3) score += 800 // Close price match
    }

    // Much higher threshold for better precision
    if (score >= 1500) {
      // Increased from 400 to 1500
      matches.push({ product, score, matchType })
    }
  }

  // Sort by score and return top matches
  const sortedMatches = matches.sort((a, b) => b.score - a.score)

  // Only return high-confidence matches
  const highConfidenceMatches = sortedMatches.filter((match) => match.score >= 2500)

  if (highConfidenceMatches.length > 0) {
    console.log(
      "üéØ High confidence matches:",
      highConfidenceMatches.map((m) => ({
        name: m.product.name,
        score: m.score,
        type: m.matchType,
      })),
    )
    return highConfidenceMatches.slice(0, 2).map((match) => match.product) // Max 2 products
  }

  // Medium confidence matches (but very selective)
  const mediumConfidenceMatches = sortedMatches.filter((match) => match.score >= 2000)

  if (mediumConfidenceMatches.length > 0) {
    console.log(
      "‚ö° Medium confidence matches:",
      mediumConfidenceMatches.map((m) => ({
        name: m.product.name,
        score: m.score,
        type: m.matchType,
      })),
    )
    return mediumConfidenceMatches.slice(0, 1).map((match) => match.product) // Max 1 product
  }

  console.log("‚ùå No high-quality matches found")
  return []
}

// Legacy export for backward compatibility
export const matchProducts = findMatchingProducts
