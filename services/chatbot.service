import { sql, getSql } from "@/lib/db"

export class ChatbotService {
  private sql = getSql()

  async getChatbotById(id: number) {
    const result = await this.sql`
      SELECT * FROM chatbots WHERE id = ${id}
    `
    return result.rows[0] || null
  }

  async getChatbotFAQs(chatbotId: number) {
    const result = await this.sql`
      SELECT * FROM chatbot_faqs 
      WHERE chatbot_id = ${chatbotId} 
      ORDER BY position ASC
    `
    return result.rows
  }

  async getChatbotProducts(chatbotId: number) {
    const result = await this.sql`
      SELECT * FROM chatbot_products 
      WHERE chatbot_id = ${chatbotId} 
      ORDER BY position ASC
    `
    return result.rows
  }

  async getChatbotOptions(chatbotId: number) {
    const result = await this.sql`
      SELECT * FROM chatbot_options 
      WHERE chatbot_id = ${chatbotId} 
      ORDER BY position ASC
    `
    return result.rows
  }

  async createChatbot(data: any) {
    const result = await this.sql`
      INSERT INTO chatbots (name, description, welcome_message, navigation_message)
      VALUES (${data.name}, ${data.description || null}, ${data.welcome_message || 'سلام!'}, ${data.navigation_message || 'چطور می‌توانم کمک کنم؟'})
      RETURNING *
    `
    return result.rows[0]
  }

  async updateChatbot(id: number, data: any) {
    const result = await this.sql`
      UPDATE chatbots 
      SET name = ${data.name}, description = ${data.description}, updated_at = NOW()
      WHERE id = ${id}
      RETURNING *
    `
    return result.rows[0]
  }

  async deleteChatbot(id: number) {
    await this.sql`DELETE FROM chatbots WHERE id = ${id}`
    return true
  }

  async getMessageStats(chatbotId: number) {
    const totalMessages = await this.sql`
      SELECT COUNT(*) as count FROM chatbot_messages WHERE chatbot_id = ${chatbotId}
    `
    
    const uniqueUsers = await this.sql`
      SELECT COUNT(DISTINCT user_ip) as count FROM chatbot_messages WHERE chatbot_id = ${chatbotId}
    `

    return {
      totalMessages: parseInt(totalMessages.rows[0].count),
      uniqueUsers: parseInt(uniqueUsers.rows[0].count)
    }
  }

  async getAllChatbots() {
    const result = await this.sql`
      SELECT * FROM chatbots ORDER BY created_at DESC
    `
    return result.rows
  }

  async getChatbotMessages(chatbotId: number, limit = 100, offset = 0) {
    const result = await this.sql`
      SELECT * FROM chatbot_messages 
      WHERE chatbot_id = ${chatbotId}
      ORDER BY timestamp DESC
      LIMIT ${limit} OFFSET ${offset}
    `
    return result.rows
  }

  async addMessage(chatbotId: number, userMessage: string, botResponse: string, userIp?: string, userAgent?: string) {
    const result = await this.sql`
      INSERT INTO chatbot_messages (chatbot_id, user_message, bot_response, user_ip, user_agent)
      VALUES (${chatbotId}, ${userMessage}, ${botResponse}, ${userIp || null}, ${userAgent || null})
      RETURNING *
    `
    return result.rows[0]
  }

  async createFAQ(chatbotId: number, question: string, answer: string, emoji = '❓', position = 0) {
    const result = await this.sql`
      INSERT INTO chatbot_faqs (chatbot_id, question, answer, emoji, position)
      VALUES (${chatbotId}, ${question}, ${answer}, ${emoji}, ${position})
      RETURNING *
    `
    return result.rows[0]
  }

  async createProduct(chatbotId: number, data: any) {
    const result = await this.sql`
      INSERT INTO chatbot_products (chatbot_id, name, description, price, image_url, position, button_text, secondary_text, product_url)
      VALUES (${chatbotId}, ${data.name}, ${data.description || null}, ${data.price || null}, ${data.image_url || null}, ${data.position || 0}, ${data.button_text || 'خرید'}, ${data.secondary_text || 'جزئیات'}, ${data.product_url || null})
      RETURNING *
    `
    return result.rows[0]
  }

  async createOption(chatbotId: number, label: string, emoji?: string, position = 0) {
    const result = await this.sql`
      INSERT INTO chatbot_options (chatbot_id, label, emoji, position)
      VALUES (${chatbotId}, ${label}, ${emoji || null}, ${position})
      RETURNING *
    `
    return result.rows[0]
  }
}
